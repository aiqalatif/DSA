 LeetCode Problem #1: Two Sum


List<int> twoSum(List<int> nums, int target) {
  Map<int, int> map = {}; // value -> index

  for (int i = 0; i < nums.length; i++) {
    int complement = target - nums[i];

    if (map.containsKey(complement)) {
      return [map[complement]!, i]; // found the two indices
    }

    map[nums[i]] = i; // store value with its index
  }

  return []; // if no solution found
}

void main() {
  print(twoSum([0, 3, 7], 10)); // Output: [1, 2] because 3 + 7 = 10
}


LeetCode Problem #49: Group Anagrams 

List<List<String>> groupAnagrams(List<String> strs) {
  Map<String, List<String>> map = {};

  for (String str in strs) {
    List<String> chars = str.split('')..sort();  // sort chars
    String key = chars.join();                   // sorted string is the key

    if (!map.containsKey(key)) {
      map[key] = [];
    }
    map[key]!.add(str);
  }

  return map.values.toList();
}

void main() {
  List<String> input = ["eat", "tea", "tan", "ate", "nat", "bat"];
  print(groupAnagrams(input));
}

