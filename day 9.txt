Remove Duplicates from Sorted Array


int removeDuplicates(List<int> nums) {
  if (nums.isEmpty) return 0;

  int k = 1;

  for (int i = 1; i < nums.length; i++) {
    if (nums[i] != nums[k - 1]) {
      nums[k] = nums[i];
      k++;
    }
  }

  return k;
}

void main() {
  List<int> nums = [1, 1, 2, 2, 3,7,7];
  int k = removeDuplicates(nums);
  print("k = $k");
  print("Updated List: ${nums.sublist(0, k)}");
}




On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.



int price(List<int> nums) {
  if (nums.isEmpty) return 0;

  int k = 0;

  for (int i = 1; i < nums.length; i++) {
    if (nums[i]> nums[i - 1]) {
      k+= nums[i]-nums[i-1];

    }
  }

  return k;
}

void main() {
  List<int> nums = [1, 1, 2, 2, 3,7,7];
  int k = price(nums);
  print("k = $k");
 
}






Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

bool price(List<int> nums) {
 
Set<int> dublicate={};
  bool k = false;

  for (int i = 1; i < nums.length; i++) {
    if (dublicate.contains(nums[i])) {
      k=true;

    }
       dublicate.add(nums[i]); 
  }

  return k;
}

void main() {
  List<int> nums = [1, 1, 2, 2, 3,7,7];
  bool k = price(nums);
  print("k = $k");
 
}




Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 


int findUnique(List<int> nums) {
  Map<int, int> count = {};

  for (int num in nums) {
    count[num] = (count[num] ?? 0) + 1;
  }

  for (int num in nums) {
    if (count[num] == 1) {
      return num; // found the one that appears only once
    }
  }

  return -1; // if no unique found
}

void main() {
  List<int> nums = [1, 1, 2, 2, 3, 7, 7];
  int k = findUnique(nums);
  print("Unique number = $k"); // Output: 3
}

